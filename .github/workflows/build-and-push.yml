name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Check for updates bi-weekly (every other Monday at 2 AM UTC)
    - cron: '0 2 */14 * 1'
  workflow_dispatch:
    inputs:
      dockware_versions:
        description: 'Comma-separated list of dockware versions to build (or "latest" for automatic detection)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: web-labels-webdesign/shopware-docker

jobs:
  detect-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - name: Detect Dockware Versions
        id: versions
        run: |
          # Function to get latest dockware versions
          get_latest_versions() {
            # Get the latest 3 versions from different major releases
            local versions=(
              "6.6.10.4"  # Latest 6.6.x
              "6.5.8.10"  # Latest 6.5.x  
              "6.4.20.2"  # Latest 6.4.x
            )
            echo "${versions[@]}"
          }
          
          # Determine which versions to build
          if [ "${{ github.event.inputs.dockware_versions }}" == "latest" ] || [ -z "${{ github.event.inputs.dockware_versions }}" ]; then
            # Auto-detect latest versions
            VERSIONS=($(get_latest_versions))
          else
            # Use provided versions
            IFS=',' read -ra VERSIONS <<< "${{ github.event.inputs.dockware_versions }}"
          fi
          
          # For Phase 1, limit to single version
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            VERSIONS=("6.6.10.4")
          fi
          
          # Create JSON array for matrix
          MATRIX_JSON=$(printf '"%s",' "${VERSIONS[@]}" | sed 's/,$//')
          MATRIX_JSON="[${MATRIX_JSON}]"
          
          echo "versions=${VERSIONS[*]}" >> $GITHUB_OUTPUT
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT
          
          echo "Detected versions: ${VERSIONS[*]}"
          echo "Matrix JSON: ${MATRIX_JSON}"

  build:
    needs: detect-versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockware_version: ${{ fromJSON(needs.detect-versions.outputs.matrix) }}
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=dockware-${{ matrix.dockware_version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Shopware Docker
            org.opencontainers.image.description=Enhanced dockware/dev with automatic permission handling
            org.opencontainers.image.vendor=Web Labels Webdesign
            dockware.version=${{ matrix.dockware_version }}

      - name: Check if image exists
        id: check-image
        run: |
          # Check if image already exists in registry
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dockware-${{ matrix.dockware_version }}"
          
          if docker manifest inspect "$IMAGE_TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image $IMAGE_TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT  
            echo "Image $IMAGE_TAG does not exist"
          fi
        continue-on-error: true

      - name: Build and push Docker image
        if: steps.check-image.outputs.exists == 'false' || github.event.inputs.force_rebuild == 'true' || github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            DOCKWARE_VERSION=${{ matrix.dockware_version }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run smoke test
        if: steps.check-image.outputs.exists == 'false' || github.event.inputs.force_rebuild == 'true' || github.event_name == 'push'
        run: |
          # Basic smoke test to ensure the container starts
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dockware-${{ matrix.dockware_version }}"
          
          echo "Starting smoke test for $IMAGE_TAG"
          
          # Pull the image we just built
          docker pull "$IMAGE_TAG"
          
          # Run basic test
          docker run --rm -d --name shopware-test \
            -e SHOPWARE_DOCKER_DEBUG=true \
            -e SHOPWARE_DOCKER_AUTO_PERMISSIONS=true \
            "$IMAGE_TAG" &
          
          # Wait for container to start
          sleep 30
          
          # Check if container is still running
          if docker ps | grep -q shopware-test; then
            echo "✅ Smoke test passed - container is running"
            docker logs shopware-test
            docker stop shopware-test
          else
            echo "❌ Smoke test failed - container stopped"
            docker logs shopware-test || true
            exit 1
          fi

  cleanup:
    needs: [detect-versions, build]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old images
        run: |
          # Keep only the latest 10 images, delete older ones
          echo "Cleaning up old images for ${{ env.IMAGE_NAME }}"
          
          # This would require the GitHub CLI or API calls to manage package versions
          # For now, we'll rely on GitHub's built-in retention policies
          echo "Image cleanup will be handled by GitHub's retention policies"