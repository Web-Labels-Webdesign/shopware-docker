name: Build and Push Shopware Development Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Build weekly on Sundays at 2 AM UTC to catch security updates  
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      version:
        description: 'Shopware version to build (leave empty for all)'
        required: false
        type: choice
        options:
          - 'all'
          - '6.5.8.18'
          - '6.6.10.6'
          - '6.7.1.0'
      platform:
        description: 'Platform to build for'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/shopware-dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - shopware_version: "6.5.8.18"
            php_version: "8.2"
            major_minor: "6.5"
          - shopware_version: "6.6.10.6"
            php_version: "8.3"
            major_minor: "6.6"
          - shopware_version: "6.7.1.0"
            php_version: "8.4"
            major_minor: "6.7"
            latest: true

    permissions:
      contents: read
      packages: write

    steps:
      - name: Check if build should run
        id: should-build
        run: |
          # Filter matrix based on workflow inputs
          VERSION_MATCH="true"
          
          # Check version filter
          if [ "${{ github.event.inputs.version }}" != "" ] && [ "${{ github.event.inputs.version }}" != "all" ]; then
            if [ "${{ matrix.shopware_version }}" != "${{ github.event.inputs.version }}" ]; then
              VERSION_MATCH="false"
            fi
          fi
          
          # Set output
          if [ "$VERSION_MATCH" = "true" ]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "Skipping build for ${{ matrix.shopware_version }} due to input filters"
          fi

      - name: Checkout repository
        if: steps.should-build.outputs.should-build == 'true'
        uses: actions/checkout@v4

      - name: Set lowercase image name
        if: steps.should-build.outputs.should-build == 'true'
        id: image-name
        run: |
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Using image name: ${IMAGE_NAME}"

      - name: Set up Docker Buildx
        if: steps.should-build.outputs.should-build == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: steps.should-build.outputs.should-build == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.should-build.outputs.should-build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}
          tags: |
            type=raw,value=${{ matrix.shopware_version }}
            type=raw,value=${{ matrix.major_minor }}
            type=raw,value=latest,enable=${{ matrix.latest == true }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.title=Shopware ${{ matrix.shopware_version }} Development
            org.opencontainers.image.description=Shopware ${{ matrix.shopware_version }} development environment with PHP ${{ matrix.php_version }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            shopware.version=${{ matrix.shopware_version }}
            php.version=${{ matrix.php_version }}

      - name: Build and push Docker image
        if: steps.should-build.outputs.should-build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ github.event.inputs.platform || 'linux/amd64,linux/arm64' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHOPWARE_VERSION=${{ matrix.shopware_version }}
            PHP_VERSION=${{ matrix.php_version }}
            BUILDKIT_INLINE_CACHE=1
          cache-from: |
            type=gha,scope=shopware-${{ matrix.shopware_version }}
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:cache-${{ matrix.shopware_version }}
          cache-to: |
            type=gha,mode=max,scope=shopware-${{ matrix.shopware_version }}
            type=registry,ref=${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:cache-${{ matrix.shopware_version }},mode=max
          provenance: false
          sbom: false

      - name: Test image
        if: steps.should-build.outputs.should-build == 'true' && github.event_name == 'pull_request'
        run: |
          echo "🧪 Testing Shopware ${{ matrix.shopware_version }} image..."
          
          CONTAINER_NAME="test-shopware-${{ matrix.shopware_version }}"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:${{ matrix.shopware_version }}"
          
          # Start container
          echo "Starting container..."
          docker run -d \
            --name ${CONTAINER_NAME} \
            -p 8080:80 \
            -p 3307:3306 \
            -p 8026:8025 \
            ${IMAGE_TAG}
          
          # Wait for Shopware to be ready (longer timeout for full setup)
          echo "Waiting for Shopware to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8080/api/_info/version 2>/dev/null; do sleep 10; echo "Still waiting for Shopware..."; done'
          
          # Basic health checks
          echo "Running health checks..."
          curl -f http://localhost:8080/api/_info/version
          echo "✅ Shopware API is responding"
          
          # Test admin panel (may fail during initial setup, that's ok)
          curl -f http://localhost:8080/admin || echo "ℹ️ Admin panel not ready yet (normal during initial setup)"
          
          # Test Mailpit
          timeout 30 bash -c 'until curl -f http://localhost:8026/ 2>/dev/null; do sleep 2; echo "Waiting for Mailpit..."; done' || echo "⚠️ Mailpit check failed"
          
          echo "✅ Image test completed successfully"
          
          # Show logs for debugging
          echo "Container logs (last 50 lines):"
          docker logs ${CONTAINER_NAME} --tail 50
          
          # Cleanup
          docker stop ${CONTAINER_NAME} || true
          docker rm ${CONTAINER_NAME} || true

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - shopware_version: "6.5.8.18"
            php_version: "8.2"
          - shopware_version: "6.6.10.6"
            php_version: "8.3"
          - shopware_version: "6.7.1.0"
            php_version: "8.4"
    
    steps:
      - name: Check if scan should run
        id: should-scan
        run: |
          # Use same filtering logic as build job
          VERSION_MATCH="true"
          
          # Check version filter
          if [ "${{ github.event.inputs.version }}" != "" ] && [ "${{ github.event.inputs.version }}" != "all" ]; then
            if [ "${{ matrix.shopware_version }}" != "${{ github.event.inputs.version }}" ]; then
              VERSION_MATCH="false"
            fi
          fi
          
          # Set output
          if [ "$VERSION_MATCH" = "true" ]; then
            echo "should-scan=true" >> $GITHUB_OUTPUT
          else
            echo "should-scan=false" >> $GITHUB_OUTPUT
            echo "Skipping scan for ${{ matrix.shopware_version }} due to input filters"
          fi

      - name: Set lowercase image name
        if: steps.should-scan.outputs.should-scan == 'true'
        id: image-name
        run: |
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        if: steps.should-scan.outputs.should-scan == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image for scanning
        if: steps.should-scan.outputs.should-scan == 'true'
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:${{ matrix.shopware_version }}"
          echo "Pulling image: ${IMAGE_REF}"
          docker pull "${IMAGE_REF}"
          docker images | grep shopware-dev

      - name: Run Trivy vulnerability scanner
        if: steps.should-scan.outputs.should-scan == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name }}:${{ matrix.shopware_version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.shopware_version }}.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        if: steps.should-scan.outputs.should-scan == 'true' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.shopware_version }}.sarif'
          category: 'trivy-${{ matrix.shopware_version }}'

  update-readme:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest build info
        run: |
          # Update build date in README
          if grep -q "Last updated:" README.md; then
            sed -i "s/Last updated: .*/Last updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')\*\*/" README.md
            echo "📊 Updated README with latest build information"
          else
            echo "ℹ️ No 'Last updated' line found in README.md to update"
          fi

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update README with latest build info [skip ci]"
          git push || echo "No changes to push"

  cleanup:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name != 'pull_request' && needs.build.result == 'success' && (github.event_name == 'push' || github.event_name == 'schedule')
    
    steps:
      - name: Delete old package versions
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: 'shopware-docker/shopware-dev'
          package-type: 'container'
          min-versions-to-keep: 4
          token: ${{ secrets.GITHUB_TOKEN }}