name: Build and Push Shopware Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Build weekly on Sundays at 2 AM UTC to get latest Shopware updates
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      shopware_versions:
        description: 'Shopware versions to build (comma-separated)'
        required: false
        default: '6.5,6.6,6.7'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/shopware-dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shopware_version: [6.5, 6.6, 6.7]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest Shopware commit for version
      id: shopware-commit
      run: |
        # Get the latest tag for the specific version
        LATEST_TAG=$(curl -s "https://api.github.com/repos/shopware/shopware/tags" | \
          jq -r --arg version "v${{ matrix.shopware_version }}" \
          '[.[] | select(.name | startswith($version))] | sort_by(.name) | reverse | .[0].name // empty')
        
        if [ -z "$LATEST_TAG" ]; then
          # Fallback to latest commit of the version branch
          COMMIT=$(curl -s "https://api.github.com/repos/shopware/shopware/commits/v${{ matrix.shopware_version }}" | jq -r '.sha // empty')
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "tag=" >> $GITHUB_OUTPUT
        else
          # Get commit hash for the tag
          COMMIT=$(curl -s "https://api.github.com/repos/shopware/shopware/git/refs/tags/$LATEST_TAG" | jq -r '.object.sha // empty')
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        fi

    - name: Determine PHP version
      id: php-version
      run: |
        case "${{ matrix.shopware_version }}" in
          6.5)
            echo "version=8.1" >> $GITHUB_OUTPUT
            ;;
          6.6)
            echo "version=8.2" >> $GITHUB_OUTPUT
            ;;
          6.7)
            echo "version=8.3" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "version=8.3" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ matrix.shopware_version }}
          type=raw,value=${{ matrix.shopware_version }}-{{date 'YYYYMMDD'}}
          type=raw,value=${{ matrix.shopware_version }}-latest
          type=sha,prefix=${{ matrix.shopware_version }}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          SHOPWARE_VERSION=${{ matrix.shopware_version }}
          PHP_VERSION=${{ steps.php-version.outputs.version }}
          SHOPWARE_COMMIT=${{ steps.shopware-commit.outputs.commit }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Update README with latest tags
      if: matrix.shopware_version == '6.7' && github.ref == 'refs/heads/main'
      run: |
        echo "Latest builds:" >> build-info.md
        echo "- Shopware ${{ matrix.shopware_version }}: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.shopware_version }}\`" >> build-info.md
        echo "- Commit: ${{ steps.shopware-commit.outputs.commit }}" >> build-info.md
        echo "- Tag: ${{ steps.shopware-commit.outputs.tag }}" >> build-info.md
        echo "- PHP Version: ${{ steps.php-version.outputs.version }}" >> build-info.md

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shopware_version: [6.5, 6.6, 6.7]
    
    steps:
    - name: Test Docker image
      run: |
        docker run --rm -d --name shopware-test-${{ matrix.shopware_version }} \
          -p 8080:80 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.shopware_version }}
        
        # Wait for container to be ready
        sleep 60
        
        # Test if services are running
        docker exec shopware-test-${{ matrix.shopware_version }} supervisorctl status
        
        # Test if Shopware is accessible
        curl -f http://localhost:8080/admin || exit 1
        
        # Cleanup
        docker stop shopware-test-${{ matrix.shopware_version }}
