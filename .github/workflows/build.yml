name: Build and Push Shopware Development Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Build weekly on Sundays at 2 AM UTC to catch security updates  
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      version:
        description: 'Shopware version to build (leave empty for all)'
        required: false
        type: choice
        options:
          - 'all'
          - '6.5.8.18'
          - '6.6.10.6'
          - '6.7.1.0'
      variant:
        description: 'Variant to build'
        required: false
        default: 'both'
        type: choice
        options:
          - 'both'
          - 'full'
          - 'slim'
      platform:
        description: 'Platform to build for'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/shopware-dev

jobs:
  # Generate dynamic build matrix
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
      build-summary: ${{ steps.generate.outputs.build-summary }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate build matrix
        id: generate
        run: |
          node scripts/generate-matrix.mjs
          echo "build-summary<<EOF" >> $GITHUB_OUTPUT
          cat build-config/build-summary.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload build configuration
        uses: actions/upload-artifact@v4
        with:
          name: build-config
          path: build-config/
          retention-days: 1

  build:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    # Filter matrix based on inputs
    if: |
      (github.event.inputs.version == '' || github.event.inputs.version == 'all' || matrix.shopware_version == github.event.inputs.version) &&
      (github.event.inputs.variant == '' || github.event.inputs.variant == 'both' || matrix.variant == github.event.inputs.variant)

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ matrix.tags }}
          labels: |
            org.opencontainers.image.title=Shopware ${{ matrix.shopware_version }} Development
            org.opencontainers.image.description=Shopware ${{ matrix.shopware_version }} development environment with PHP ${{ matrix.php_version }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            shopware.version=${{ matrix.shopware_version }}
            php.version=${{ matrix.php_version }}

      - name: Download build configuration
        uses: actions/download-artifact@v4
        with:
          name: build-config
          path: build-config/

      - name: Prepare build context
        run: |
          echo "🔧 Preparing build context for ${{ matrix.shopware_version }} (${{ matrix.variant }})"
          mkdir -p build/${{ matrix.shopware_version }}
          
          # Determine version directory (use context_path from matrix)
          VERSION_DIR="${{ matrix.context_path }}"
          if [ ! -d "${VERSION_DIR}" ]; then
            echo "❌ Version directory ${VERSION_DIR} not found"
            exit 1
          fi
          
          # Select appropriate Dockerfile based on variant
          if [ "${{ matrix.variant }}" = "slim" ]; then
            DOCKERFILE_SOURCE="templates/Dockerfile.slim"
            SUPERVISORD_SOURCE="templates/supervisord-slim.conf"
            START_SCRIPT_SOURCE="templates/start-slim.sh"
          else
            DOCKERFILE_SOURCE="templates/Dockerfile.base"
            SUPERVISORD_SOURCE="${VERSION_DIR}/supervisord.conf"
            START_SCRIPT_SOURCE="${VERSION_DIR}/start.sh"
          fi
          
          # Copy and customize Dockerfile
          cp ${DOCKERFILE_SOURCE} build/${{ matrix.shopware_version }}/${{ matrix.dockerfile }}
          
          # Copy configuration files
          cp ${VERSION_DIR}/apache-shopware.conf build/${{ matrix.shopware_version }}/ || true
          cp ${VERSION_DIR}/.env.dev build/${{ matrix.shopware_version }}/ || true
          cp ${SUPERVISORD_SOURCE} build/${{ matrix.shopware_version }}/supervisord.conf
          cp ${START_SCRIPT_SOURCE} build/${{ matrix.shopware_version }}/start.sh
          
          # Make scripts executable
          chmod +x build/${{ matrix.shopware_version }}/start.sh
          
          echo "✅ Build context prepared for ${{ matrix.variant }} variant"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: build/${{ matrix.shopware_version }}
          file: build/${{ matrix.shopware_version }}/${{ matrix.dockerfile }}
          platforms: ${{ github.event.inputs.platform || 'linux/amd64,linux/arm64' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHOPWARE_VERSION=${{ matrix.shopware_version }}
            PHP_VERSION=${{ matrix.php_version }}
            VARIANT=${{ matrix.variant }}
            BUILDKIT_INLINE_CACHE=1
          cache-from: |
            type=gha,scope=${{ matrix.cache_key }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.cache_key }}
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.cache_key }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.cache_key }},mode=max
          provenance: false
          sbom: false

      - name: Test image
        if: github.event_name == 'pull_request'
        run: |
          echo "🧪 Testing Shopware ${{ matrix.shopware_version }} (${{ matrix.variant }}) image..."
          
          CONTAINER_NAME="test-shopware-${{ matrix.shopware_version }}-${{ matrix.variant }}"
          IMAGE_TAG="${{ steps.meta.outputs.tags | head -1 }}"
          
          if [ "${{ matrix.variant }}" = "slim" ]; then
            # Test slim variant (PHP-FPM only)
            echo "Testing slim variant..."
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p 9000:9000 \
              ${IMAGE_TAG}
            
            # Wait for PHP-FPM to be ready
            timeout 60 bash -c 'until curl -f http://localhost:9000/ping; do sleep 2; echo "Waiting for PHP-FPM..."; done'
            
            # Test health endpoint
            curl -f http://localhost:9000/health.php
            
            echo "✅ Slim variant test passed"
          else
            # Test full variant (complete Shopware)
            echo "Testing full variant..."
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p 8080:80 \
              ${IMAGE_TAG}
            
            # Wait for Shopware to be ready (longer timeout for full setup)
            timeout 300 bash -c 'until curl -f http://localhost:8080/api/_info/version 2>/dev/null; do sleep 5; echo "Waiting for Shopware..."; done'
            
            # Basic health checks
            curl -f http://localhost:8080/api/_info/version
            curl -f http://localhost:8080/admin || echo "Admin panel check failed (expected during setup)"
            
            # Test MailHog
            curl -f http://localhost:8025/ || echo "MailHog check failed"
            
            echo "✅ Full variant test passed"
          fi
          
          # Show logs for debugging
          docker logs ${CONTAINER_NAME} --tail 50
          
          # Cleanup
          docker stop ${CONTAINER_NAME} || true
          docker rm ${CONTAINER_NAME} || true

  security-scan:
    runs-on: ubuntu-latest
    needs: [generate-matrix, build]
    if: github.event_name != 'pull_request'
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    steps:
      - name: Download build configuration
        uses: actions/download-artifact@v4
        with:
          name: build-config
          path: build-config/

      - name: Set image reference
        id: vars
        run: |
          # Extract first tag from matrix tags
          FIRST_TAG=$(echo "${{ matrix.tags }}" | head -1 | sed 's/type=raw,value=//')
          IMAGE_REF="ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')/shopware-dev:${FIRST_TAG}"
          echo "image_ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
          echo "Scanning image: ${IMAGE_REF}"
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.vars.outputs.image_ref }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.shopware_version }}-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.shopware_version }}-${{ matrix.variant }}.sarif'
          category: 'trivy-${{ matrix.shopware_version }}-${{ matrix.variant }}'

  update-readme:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest build info
        run: |
          # Update build date in README
          sed -i "s/Last updated: .*/Last updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')/" README.md
          
          # Update image sizes (this would need actual implementation)
          echo "📊 Updated README with latest build information"

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update README with latest build info [skip ci]"
          git push

  cleanup:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: always()
    
    steps:
      - name: Delete old package versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.repository }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true