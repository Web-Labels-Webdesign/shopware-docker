# Slim Shopware Development Environment
# Minimal footprint for CI/CD and lightweight development

# Build arguments
ARG SHOPWARE_VERSION
ARG PHP_VERSION

#
# Base stage - Essential dependencies only
#
FROM ubuntu:22.04 AS base

# Build arguments in stage
ARG SHOPWARE_VERSION
ARG PHP_VERSION

# Metadata
LABEL org.opencontainers.image.title="Shopware ${SHOPWARE_VERSION} Development (Slim)"
LABEL org.opencontainers.image.description="Slim Shopware ${SHOPWARE_VERSION} development environment with PHP ${PHP_VERSION}"
LABEL org.opencontainers.image.vendor="weblabels"
LABEL org.opencontainers.image.source="https://github.com/weblabels/shopware-docker"
LABEL org.opencontainers.image.licenses="MIT"
LABEL shopware.version="${SHOPWARE_VERSION}"
LABEL php.version="${PHP_VERSION}"
LABEL variant="slim"

# Environment setup
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Berlin
ENV SHOPWARE_VERSION=${SHOPWARE_VERSION}
ENV PHP_VERSION=${PHP_VERSION}
ENV VARIANT=slim

# Create non-root user
RUN groupadd --gid 1000 shopware \
    && useradd --uid 1000 --gid shopware --shell /bin/bash --create-home shopware

# Install minimal system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    wget \
    unzip \
    xz-utils \
    git \
    gnupg2 \
    software-properties-common \
    && add-apt-repository ppa:ondrej/php -y \
    && apt-get update \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

#
# PHP stage - Minimal PHP setup
#
FROM base AS php-slim

# Install PHP with essential extensions only
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PHP core (minimal)
    php${PHP_VERSION}-cli \
    php${PHP_VERSION}-fpm \
    # Essential extensions for Shopware
    php${PHP_VERSION}-mysql \
    php${PHP_VERSION}-pdo \
    php${PHP_VERSION}-zip \
    php${PHP_VERSION}-gd \
    php${PHP_VERSION}-mbstring \
    php${PHP_VERSION}-curl \
    php${PHP_VERSION}-xml \
    php${PHP_VERSION}-bcmath \
    php${PHP_VERSION}-intl \
    php${PHP_VERSION}-opcache \
    # Performance
    php${PHP_VERSION}-apcu \
    # Process management
    supervisor \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Minimal PHP configuration optimized for performance
RUN { \
        echo 'memory_limit = 512M'; \
        echo 'max_execution_time = 300'; \
        echo 'opcache.enable = 1'; \
        echo 'opcache.memory_consumption = 128'; \
        echo 'opcache.interned_strings_buffer = 8'; \
        echo 'opcache.max_accelerated_files = 10000'; \
        echo 'opcache.validate_timestamps = 0'; \
        echo 'opcache.save_comments = 0'; \
        echo 'apcu.enabled = 1'; \
        echo 'apcu.shm_size = 64M'; \
    } > /etc/php/${PHP_VERSION}/fpm/conf.d/99-shopware-slim.ini \
    && cp /etc/php/${PHP_VERSION}/fpm/conf.d/99-shopware-slim.ini /etc/php/${PHP_VERSION}/cli/conf.d/99-shopware-slim.ini \
    # CLI specific
    && echo 'memory_limit = 1G' >> /etc/php/${PHP_VERSION}/cli/conf.d/99-shopware-slim.ini \
    && echo 'max_execution_time = 0' >> /etc/php/${PHP_VERSION}/cli/conf.d/99-shopware-slim.ini

#
# Node.js stage - Minimal Node.js setup
#
FROM php-slim AS node-slim

# Install Node.js (minimal)
RUN ARCH=$(dpkg --print-architecture) \
    && case "$ARCH" in \
        amd64) NODE_ARCH="x64" ;; \
        arm64) NODE_ARCH="arm64" ;; \
        *) NODE_ARCH="x64" ;; \
    esac \
    && NODE_VERSION=$([ "${SHOPWARE_VERSION%.*}" = "6.7" ] && echo "22.11.0" || echo "20.18.0") \
    && curl -fsSL "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz" -o node.tar.xz \
    && tar -xJf node.tar.xz -C /usr/local --strip-components=1 \
    && rm node.tar.xz \
    # Install minimal npm packages
    && npm install -g npm@latest --no-audit --no-fund

#
# Tools stage - Essential development tools
#
FROM node-slim AS tools-slim

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && composer --version \
    && composer config --global process-timeout 2000

# Install Shopware CLI
RUN curl -1sLf 'https://dl.cloudsmith.io/public/friendsofshopware/stable/setup.deb.sh' | bash \
    && apt-get update \
    && apt-get install -y --no-install-recommends shopware-cli \
    && rm -rf /var/lib/apt/lists/*

#
# Application stage - Shopware installation
#
FROM tools-slim AS application-slim

# Create application directory
RUN mkdir -p /var/www/html \
    && chown -R shopware:shopware /var/www/html

WORKDIR /var/www/html

# Switch to non-root user
USER shopware

# Create minimal Shopware project (production optimized)
RUN MAJOR_MINOR=$(echo "$SHOPWARE_VERSION" | cut -d. -f1-2) \
    && echo "Creating minimal Shopware project..." \
    && cd /tmp \
    && COMPOSER_MEMORY_LIMIT=-1 composer create-project "shopware/production:~${MAJOR_MINOR}.0" shopware-project \
        --no-interaction \
        --prefer-dist \
        --ignore-platform-reqs \
        --no-dev \
        --optimize-autoloader \
    && echo "Moving project files to application directory..." \
    && cd /var/www/html \
    && rm -rf ./* ./.* 2>/dev/null || true \
    && mv /tmp/shopware-project/* /tmp/shopware-project/.* /var/www/html/ 2>/dev/null || true \
    && rmdir /tmp/shopware-project \
    && echo "APP_ENV=prod" > .env.local \
    && echo "DATABASE_URL=mysql://shopware:shopware@host.docker.internal:3306/shopware" >> .env.local \
    && echo "APP_URL=http://localhost" >> .env.local

# Create essential directories
RUN mkdir -p var/cache var/log \
    && mkdir -p public/media public/thumbnail \
    && mkdir -p files \
    && mkdir -p custom/plugins

# Switch back to root for final setup
USER root

# Copy minimal configuration
COPY --chown=shopware:shopware supervisord-slim.conf /etc/supervisor/conf.d/supervisord.conf
COPY --chown=shopware:shopware start-slim.sh /usr/local/bin/start.sh

# Set permissions
RUN chmod +x /usr/local/bin/start.sh \
    && chown -R shopware:shopware /var/www/html \
    && chmod -R 755 /var/www/html \
    && chmod -R 775 /var/www/html/var \
    && chmod -R 775 /var/www/html/public \
    && chmod -R 775 /var/www/html/files \
    && chmod -R 775 /var/www/html/custom

#
# Runtime stage - Final slim image
#
FROM application-slim AS runtime-slim

# Expose minimal ports (no MySQL, MailHog, or Xdebug)
EXPOSE 9000

# Health check for PHP-FPM
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:9000/ping || exit 1

# Use non-root user
USER shopware

# Start PHP-FPM only
CMD ["/usr/local/bin/start.sh"]